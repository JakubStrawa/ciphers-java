/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mavenproject1;

import java.awt.CardLayout;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;

/**
 *
 * @author kuba
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainView() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        caesarPanel = new javax.swing.JPanel();
        caesarLabel = new javax.swing.JLabel();
        offsetCaesarSpinner = new javax.swing.JSpinner();
        chooseOffsetCaesarLabel = new javax.swing.JLabel();
        enigmaPanel = new javax.swing.JPanel();
        rotorOffsetLabel = new javax.swing.JLabel();
        enigmaLabel = new javax.swing.JLabel();
        plugboardLabel = new javax.swing.JLabel();
        offset2ComboBox = new javax.swing.JComboBox<>();
        reflectorCCheckBox = new javax.swing.JCheckBox();
        rotor2ComboBox = new javax.swing.JComboBox<>();
        rotor1ComboBox = new javax.swing.JComboBox<>();
        offset3ComboBox = new javax.swing.JComboBox<>();
        rotorOrderLabel = new javax.swing.JLabel();
        offset1ComboBox = new javax.swing.JComboBox<>();
        plugboardScrollPane = new javax.swing.JScrollPane();
        plugboardTextArea = new javax.swing.JTextArea();
        reflectorBCheckBox = new javax.swing.JCheckBox();
        rotor3ComboBox = new javax.swing.JComboBox<>();
        showEnigmaTableButton = new javax.swing.JButton();
        blowfishPanel = new javax.swing.JPanel();
        keyBlowfishTextField = new javax.swing.JTextField();
        blowfishLabel = new javax.swing.JLabel();
        outputTypeBlowfishComboBox = new javax.swing.JComboBox<>();
        outputTyprBlowfishLabel = new javax.swing.JLabel();
        polybiusPanel = new javax.swing.JPanel();
        customKeyPolybiusTextField = new javax.swing.JTextField();
        customKeyPolybiusCheckBox = new javax.swing.JCheckBox();
        polybiusLabel = new javax.swing.JLabel();
        showPolybiusTableButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        decodeCheckBox = new javax.swing.JCheckBox();
        cipherComboBox = new javax.swing.JComboBox<>();
        runSBSCheckBox = new javax.swing.JCheckBox();
        answerScrollPane2 = new javax.swing.JScrollPane();
        answerTextArea = new javax.swing.JTextArea();
        messageScrollPane = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        copyResultMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        decodeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        gotoMenu = new javax.swing.JMenu();
        caesarMenuItem = new javax.swing.JMenuItem();
        polybiusMenuItem = new javax.swing.JMenuItem();
        enigmaMenuItem = new javax.swing.JMenuItem();
        blowfishMenuItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        runMenuItem = new javax.swing.JMenuItem();
        runSBSCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutCipherMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ciphers");
        setBackground(new java.awt.Color(255, 255, 255));

        mainPanel.setBackground(new java.awt.Color(102, 102, 102));
        mainPanel.setLayout(new java.awt.CardLayout());

        caesarPanel.setBackground(new java.awt.Color(255, 255, 255));

        caesarLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        caesarLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        caesarLabel.setText("Caesar cipher");

        chooseOffsetCaesarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        chooseOffsetCaesarLabel.setText("Choose message offset");

        javax.swing.GroupLayout caesarPanelLayout = new javax.swing.GroupLayout(caesarPanel);
        caesarPanel.setLayout(caesarPanelLayout);
        caesarPanelLayout.setHorizontalGroup(
            caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caesarPanelLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(chooseOffsetCaesarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(offsetCaesarSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 170, Short.MAX_VALUE))
            .addComponent(caesarLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        caesarPanelLayout.setVerticalGroup(
            caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caesarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(caesarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseOffsetCaesarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offsetCaesarSpinner))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        mainPanel.add(caesarPanel, "caesar");

        enigmaPanel.setBackground(new java.awt.Color(255, 255, 255));

        rotorOffsetLabel.setText("Rotor offset:");

        enigmaLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        enigmaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enigmaLabel.setText("Enigma");

        plugboardLabel.setText("Plugboard:");

        offset2ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26" }));

        reflectorCCheckBox.setText("Reflector UKW C");
        reflectorCCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflectorCCheckBoxActionPerformed(evt);
            }
        });

        rotor2ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "I", "II", "III", "IV", "V" }));
        rotor2ComboBox.setSelectedIndex(-1);
        rotor2ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotor2ComboBoxActionPerformed(evt);
            }
        });

        rotor1ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "I", "II", "III", "IV", "V" }));
        rotor1ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotor1ComboBoxActionPerformed(evt);
            }
        });

        offset3ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26" }));

        rotorOrderLabel.setText("Rotor order:");

        offset1ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26" }));

        plugboardTextArea.setColumns(20);
        plugboardTextArea.setLineWrap(true);
        plugboardTextArea.setRows(3);
        plugboardTextArea.setText("Enter your plugboard connections, each letter can only be used in one connection");
        plugboardScrollPane.setViewportView(plugboardTextArea);

        reflectorBCheckBox.setSelected(true);
        reflectorBCheckBox.setText("Reflector UKW B");
        reflectorBCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflectorBCheckBoxActionPerformed(evt);
            }
        });

        rotor3ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "I", "II", "III", "IV", "V" }));
        rotor3ComboBox.setSelectedIndex(-1);
        rotor3ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotor3ComboBoxActionPerformed(evt);
            }
        });

        showEnigmaTableButton.setText("Show Table");

        javax.swing.GroupLayout enigmaPanelLayout = new javax.swing.GroupLayout(enigmaPanel);
        enigmaPanel.setLayout(enigmaPanelLayout);
        enigmaPanelLayout.setHorizontalGroup(
            enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enigmaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rotor3ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotor2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotor1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotorOrderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(enigmaPanelLayout.createSequentialGroup()
                        .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(offset2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offset3ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offset1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(plugboardScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(enigmaPanelLayout.createSequentialGroup()
                        .addComponent(rotorOffsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plugboardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(enigmaPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reflectorCCheckBox)
                            .addComponent(reflectorBCheckBox)))
                    .addGroup(enigmaPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(showEnigmaTableButton)))
                .addContainerGap())
            .addComponent(enigmaLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        enigmaPanelLayout.setVerticalGroup(
            enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enigmaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enigmaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotorOrderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotorOffsetLabel)
                    .addComponent(plugboardLabel)
                    .addComponent(reflectorBCheckBox))
                .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(enigmaPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotor1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offset1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotor2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offset2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotor3ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offset3ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, enigmaPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(enigmaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(enigmaPanelLayout.createSequentialGroup()
                                .addComponent(reflectorCCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(showEnigmaTableButton))
                            .addComponent(plugboardScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37))
        );

        mainPanel.add(enigmaPanel, "enigma");

        blowfishPanel.setBackground(new java.awt.Color(255, 255, 255));

        keyBlowfishTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keyBlowfishTextField.setText("Enter your key");

        blowfishLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        blowfishLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        blowfishLabel.setText("Blowfish");

        outputTypeBlowfishComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Char", "Integer", "Raw", "Hex" }));

        outputTyprBlowfishLabel.setText("Output type:");

        javax.swing.GroupLayout blowfishPanelLayout = new javax.swing.GroupLayout(blowfishPanel);
        blowfishPanel.setLayout(blowfishPanelLayout);
        blowfishPanelLayout.setHorizontalGroup(
            blowfishPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blowfishPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blowfishLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blowfishPanelLayout.createSequentialGroup()
                .addContainerGap(179, Short.MAX_VALUE)
                .addGroup(blowfishPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(blowfishPanelLayout.createSequentialGroup()
                        .addComponent(outputTyprBlowfishLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputTypeBlowfishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(keyBlowfishTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(167, 167, 167))
        );
        blowfishPanelLayout.setVerticalGroup(
            blowfishPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blowfishPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(blowfishLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(keyBlowfishTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(blowfishPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputTypeBlowfishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputTyprBlowfishLabel))
                .addContainerGap())
        );

        mainPanel.add(blowfishPanel, "blowfish");

        polybiusPanel.setBackground(new java.awt.Color(255, 255, 255));

        customKeyPolybiusTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customKeyPolybiusTextField.setText("Default key");
        customKeyPolybiusTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customKeyPolybiusTextFieldActionPerformed(evt);
            }
        });

        customKeyPolybiusCheckBox.setText("Custom key");
        customKeyPolybiusCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customKeyPolybiusCheckBoxActionPerformed(evt);
            }
        });

        polybiusLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        polybiusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        polybiusLabel.setText("Polybius Square");

        showPolybiusTableButton.setText("Show Table");
        showPolybiusTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPolybiusTableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout polybiusPanelLayout = new javax.swing.GroupLayout(polybiusPanel);
        polybiusPanel.setLayout(polybiusPanelLayout);
        polybiusPanelLayout.setHorizontalGroup(
            polybiusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(polybiusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, polybiusPanelLayout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addComponent(customKeyPolybiusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(polybiusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showPolybiusTableButton)
                    .addComponent(customKeyPolybiusCheckBox))
                .addGap(52, 52, 52))
        );
        polybiusPanelLayout.setVerticalGroup(
            polybiusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polybiusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(polybiusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(polybiusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customKeyPolybiusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customKeyPolybiusCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(showPolybiusTableButton)
                .addGap(27, 27, 27))
        );

        mainPanel.add(polybiusPanel, "polybius");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        decodeCheckBox.setText("Decode message");
        decodeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeCheckBoxActionPerformed(evt);
            }
        });

        cipherComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Caesar", "Polybius", "Enigma", "Blowfish" }));
        cipherComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherComboBoxActionPerformed(evt);
            }
        });

        runSBSCheckBox.setText("Run step by step");
        runSBSCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runSBSCheckBoxActionPerformed(evt);
            }
        });

        answerTextArea.setEditable(false);
        answerTextArea.setColumns(20);
        answerTextArea.setLineWrap(true);
        answerTextArea.setRows(5);
        answerTextArea.setText("Press run to see your answer");
        answerTextArea.setToolTipText("");
        answerTextArea.setWrapStyleWord(true);
        answerScrollPane2.setViewportView(answerTextArea);

        messageTextArea.setColumns(20);
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(4);
        messageTextArea.setText("Enter your message here");
        messageTextArea.setWrapStyleWord(true);
        messageScrollPane.setViewportView(messageTextArea);

        fileMenu.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        copyResultMenuItem.setText("Copy result");
        copyResultMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyResultMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyResultMenuItem);

        mainMenuBar.add(editMenu);

        viewMenu.setText("View");

        decodeCheckBoxMenuItem.setText("Decode message");
        decodeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(decodeCheckBoxMenuItem);

        gotoMenu.setText("Go to");

        caesarMenuItem.setText("Caesar");
        caesarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caesarMenuItemActionPerformed(evt);
            }
        });
        gotoMenu.add(caesarMenuItem);

        polybiusMenuItem.setText("Polybius");
        polybiusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polybiusMenuItemActionPerformed(evt);
            }
        });
        gotoMenu.add(polybiusMenuItem);

        enigmaMenuItem.setText("Enigma");
        enigmaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enigmaMenuItemActionPerformed(evt);
            }
        });
        gotoMenu.add(enigmaMenuItem);

        blowfishMenuItem.setText("Blowfish");
        blowfishMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blowfishMenuItemActionPerformed(evt);
            }
        });
        gotoMenu.add(blowfishMenuItem);

        viewMenu.add(gotoMenu);

        mainMenuBar.add(viewMenu);

        runMenu.setText("Run");

        runMenuItem.setText("Run");
        runMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(runMenuItem);

        runSBSCheckBoxMenuItem.setText("Run step by step");
        runSBSCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runSBSCheckBoxMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(runSBSCheckBoxMenuItem);

        mainMenuBar.add(runMenu);

        aboutMenu.setText("About");

        aboutCipherMenuItem.setText("About cipher");
        aboutCipherMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutCipherMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutCipherMenuItem);

        mainMenuBar.add(aboutMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(messageScrollPane)
                .addGap(18, 18, 18)
                .addComponent(answerScrollPane2)
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(cipherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(decodeCheckBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(runSBSCheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(56, 56, 56))
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(answerScrollPane2)
                    .addComponent(messageScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(decodeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runSBSCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cipherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 19, Short.MAX_VALUE)))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

    }//GEN-LAST:event_runButtonActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void caesarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caesarMenuItemActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "caesar");
        cipherComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_caesarMenuItemActionPerformed

    private void polybiusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polybiusMenuItemActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "polybius");
        cipherComboBox.setSelectedIndex(1);
    }//GEN-LAST:event_polybiusMenuItemActionPerformed

    private void enigmaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enigmaMenuItemActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "enigma");
        cipherComboBox.setSelectedIndex(2);
    }//GEN-LAST:event_enigmaMenuItemActionPerformed

    private void blowfishMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blowfishMenuItemActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "blowfish");
        cipherComboBox.setSelectedIndex(3);
    }//GEN-LAST:event_blowfishMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void copyResultMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyResultMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_copyResultMenuItemActionPerformed

    private void runMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runMenuItemActionPerformed

    private void runSBSCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runSBSCheckBoxMenuItemActionPerformed
        if (runSBSCheckBox.isSelected()) {
            runSBSCheckBox.setSelected(false);
        } else {
            runSBSCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_runSBSCheckBoxMenuItemActionPerformed

    private void aboutCipherMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutCipherMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aboutCipherMenuItemActionPerformed

    private void decodeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeCheckBoxActionPerformed
        if (decodeCheckBoxMenuItem.isSelected()) {
            decodeCheckBoxMenuItem.setSelected(false);
        } else {
            decodeCheckBoxMenuItem.setSelected(true);
        }
    }//GEN-LAST:event_decodeCheckBoxActionPerformed

    private void customKeyPolybiusTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customKeyPolybiusTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customKeyPolybiusTextFieldActionPerformed

    private void customKeyPolybiusCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customKeyPolybiusCheckBoxActionPerformed
//        if (customKeyCheckBoxMenuItem.isSelected()) {
//            customKeyCheckBoxMenuItem.setSelected(false);
//        } else {
//            customKeyCheckBoxMenuItem.setSelected(true);
//        }
    }//GEN-LAST:event_customKeyPolybiusCheckBoxActionPerformed

    private void reflectorCCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflectorCCheckBoxActionPerformed
        if (reflectorBCheckBox.isSelected()) {
            reflectorBCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_reflectorCCheckBoxActionPerformed

    private void rotor2ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotor2ComboBoxActionPerformed
        if (rotor1ComboBox.getSelectedIndex() == rotor2ComboBox.getSelectedIndex() || rotor2ComboBox.getSelectedIndex() == rotor3ComboBox.getSelectedIndex()) {
            rotor2ComboBox.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_rotor2ComboBoxActionPerformed

    private void rotor1ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotor1ComboBoxActionPerformed
        if (rotor1ComboBox.getSelectedIndex() == rotor2ComboBox.getSelectedIndex() || rotor1ComboBox.getSelectedIndex() == rotor3ComboBox.getSelectedIndex()) {
            rotor1ComboBox.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_rotor1ComboBoxActionPerformed

    private void reflectorBCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflectorBCheckBoxActionPerformed
        if (reflectorCCheckBox.isSelected()) {
            reflectorCCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_reflectorBCheckBoxActionPerformed

    private void rotor3ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotor3ComboBoxActionPerformed
        if (rotor1ComboBox.getSelectedIndex() == rotor3ComboBox.getSelectedIndex() || rotor2ComboBox.getSelectedIndex() == rotor3ComboBox.getSelectedIndex()) {
            rotor3ComboBox.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_rotor3ComboBoxActionPerformed

    private void cipherComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherComboBoxActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        if (cipherComboBox.getSelectedIndex() == 0) {
            card.show(mainPanel, "caesar");
        } else if (cipherComboBox.getSelectedIndex() == 1) {
            card.show(mainPanel, "polybius");
        } else if (cipherComboBox.getSelectedIndex() == 2) {
            card.show(mainPanel, "enigma");
        } else if (cipherComboBox.getSelectedIndex() == 3) {
            card.show(mainPanel, "blowfish");
        } 
    }//GEN-LAST:event_cipherComboBoxActionPerformed

    private void decodeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeCheckBoxMenuItemActionPerformed
        if (decodeCheckBox.isSelected()) {
            decodeCheckBox.setSelected(false);
        } else {
            decodeCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_decodeCheckBoxMenuItemActionPerformed

    private void runSBSCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runSBSCheckBoxActionPerformed
        if (runSBSCheckBoxMenuItem.isSelected()) {
            runSBSCheckBoxMenuItem.setSelected(false);
        } else {
            runSBSCheckBoxMenuItem.setSelected(true);
        }
    }//GEN-LAST:event_runSBSCheckBoxActionPerformed

    private void showPolybiusTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPolybiusTableButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showPolybiusTableButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }
    
    
    public void addRunActionListener(ActionListener a){
        runButton.addActionListener(a);
    }
    public void addRunMenuActionListener(ActionListener a){
        runMenuItem.addActionListener(a);
    }
    public int getCaesarKey(){
        return (int) offsetCaesarSpinner.getValue();
    }
    public boolean getIsEncrypted(){
        return decodeCheckBox.isSelected();
    }
    public String getMessage(){
        return messageTextArea.getText().trim().toLowerCase();
    }
    public void setMessage(String mes){
        answerTextArea.setText(mes);
    }
    public int getOutputTypeBlowfish(){
        return outputTypeBlowfishComboBox.getSelectedIndex();
    }
    public String getKeyBlowfish(){
        return keyBlowfishTextField.getText();
    }
    public void addShowTablePolybiusActionListener(ActionListener a){
        showPolybiusTableButton.addActionListener(a);
    }
    public boolean getIfCustomKeyUsedPolybius(){
        return customKeyPolybiusCheckBox.isSelected();
    }
    public String getCustomKeyPolybius(){
        return customKeyPolybiusTextField.getText().trim().toLowerCase();
    }
    public void addShowTableEnigmaActionlistener(ActionListener a){
        showEnigmaTableButton.addActionListener(a);
    }
    public boolean getIfreflectorBUsed(){
        return reflectorBCheckBox.isSelected();
    }
    public int getRotor1Index(){
        return rotor1ComboBox.getSelectedIndex();
    }
    public int getRotor2Index(){
        return rotor2ComboBox.getSelectedIndex();
    }
    public int getRotor3Index(){
        return rotor3ComboBox.getSelectedIndex();
    }
    public int getRotor1Offset(){
        return offset1ComboBox.getSelectedIndex();
    }
    public int getRotor2Offset(){
        return offset2ComboBox.getSelectedIndex();
    }
    public int getRotor3Offset(){
        return offset3ComboBox.getSelectedIndex();
    }
    public String getPlugboard(){
        return plugboardTextArea.getText();
    }
    public int getCipherType(){
        return cipherComboBox.getSelectedIndex();
    }
    public void addAboutCipherActionListener(ActionListener a){
        aboutCipherMenuItem.addActionListener(a);
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutCipherMenuItem;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JScrollPane answerScrollPane2;
    private javax.swing.JTextArea answerTextArea;
    private javax.swing.JLabel blowfishLabel;
    private javax.swing.JMenuItem blowfishMenuItem;
    private javax.swing.JPanel blowfishPanel;
    private javax.swing.JLabel caesarLabel;
    private javax.swing.JMenuItem caesarMenuItem;
    private javax.swing.JPanel caesarPanel;
    private javax.swing.JLabel chooseOffsetCaesarLabel;
    private javax.swing.JComboBox<String> cipherComboBox;
    private javax.swing.JMenuItem copyResultMenuItem;
    private javax.swing.JCheckBox customKeyPolybiusCheckBox;
    private javax.swing.JTextField customKeyPolybiusTextField;
    private javax.swing.JCheckBox decodeCheckBox;
    private javax.swing.JCheckBoxMenuItem decodeCheckBoxMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JLabel enigmaLabel;
    private javax.swing.JMenuItem enigmaMenuItem;
    private javax.swing.JPanel enigmaPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu gotoMenu;
    private javax.swing.JTextField keyBlowfishTextField;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JComboBox<String> offset1ComboBox;
    private javax.swing.JComboBox<String> offset2ComboBox;
    private javax.swing.JComboBox<String> offset3ComboBox;
    private javax.swing.JSpinner offsetCaesarSpinner;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JComboBox<String> outputTypeBlowfishComboBox;
    private javax.swing.JLabel outputTyprBlowfishLabel;
    private javax.swing.JLabel plugboardLabel;
    private javax.swing.JScrollPane plugboardScrollPane;
    private javax.swing.JTextArea plugboardTextArea;
    private javax.swing.JLabel polybiusLabel;
    private javax.swing.JMenuItem polybiusMenuItem;
    private javax.swing.JPanel polybiusPanel;
    private javax.swing.JCheckBox reflectorBCheckBox;
    private javax.swing.JCheckBox reflectorCCheckBox;
    private javax.swing.JComboBox<String> rotor1ComboBox;
    private javax.swing.JComboBox<String> rotor2ComboBox;
    private javax.swing.JComboBox<String> rotor3ComboBox;
    private javax.swing.JLabel rotorOffsetLabel;
    private javax.swing.JLabel rotorOrderLabel;
    private javax.swing.JButton runButton;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem runMenuItem;
    private javax.swing.JCheckBox runSBSCheckBox;
    private javax.swing.JCheckBoxMenuItem runSBSCheckBoxMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton showEnigmaTableButton;
    private javax.swing.JButton showPolybiusTableButton;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
